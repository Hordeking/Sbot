The files are stored a little strangely. They're not stored linearly.
Each side of each cylinder has 9 sectors. Each file resides only on
one side of the disk. This is the .head member.

To begin, we start with a starting cylinder and how many of these to
load (.cylinder and .nCylinders, respectively). Read the first 8
sectors of the cylinder and buffer them. Once these sectors are
transferred to memory, we increment the cylinder and repeat the
process for the first 8 sectors of that cylinder, and so on.
Each of these transfers writes the data at the end of the previous.

Once we have finished copying the number of cylinders above, we do
something similar again. Except this time we only copy one sector.
We start with the cylinder given by .sect9cyl and repeat the process
times .nSect9cyl. There is no requirement that we read the same
number of sector 9 cylinders as we did in the previous step. There's
also no requirement that they start on the same cylinder, or that
the sector9 cylinders be anywhere near the sectors 1-8 block.
Each of these transfers writes the data at the end of the previous.

For the final step, we just read in sector 9 of the cylinder one past
the previous. But for this one, we don't actually use the entire
sector. For this step, just copy .nBytesLastSect worth of bytes to
the end of the previous transfer This cylinder is ALWAYS one past
the end of the previous one.

On-disk layout (LBA nums). Disk tracks run horz from 1-9 per side.
Side 0:                        Side 1:
 0  1  2  3  4  5  6  7  8      9-17		Cyl0
18 19 20 21 22 23 24 25 26     27-35		Cyl1
36 37 38 39 40 41 42 43 44     45-53		Cyl2
54 55 56 57 58 59 60 61 62     63-71		Cyl3
...

If our file struct is given as 1, 3, 1, 2, 40
then our final file will have the following linear layout (LBA nums).
18 19 20 21 22 23 24 25 36 37 38 39 40 41 42 43 54 55 56 57 58 59 60 61 26 44 {first 40 bytes of LBA 62}


The file loading subroutine uses a structure that has the following format:

load_file:
	.cylinder			db 0x01		; CHS Cylinder where to start copying sectors 1-8
	.head				db 0x00		; CHS Which side of the disk it's on
	.nCylinders			db 0x21		; Number of cylinders to read
	.sect9cyl			db 0x01		; CHS Cylinder where to start copying sector 9s from
	.nSect9cyl			db 0x1A		; Number of sector 9 cyls to rd
	.nBytesLastSect		dw 0x0080	; Number of bytes from final sector. This is comes from the cylinder right after the last sector 9 cylinder.

This is overall 7 bytes long, and are all contained in the second stage bootloader.

Incidentally, the expected file size should be (8*.nCylinders+.nSect9cyl)*512+.nBytesLastSect.

In asm:
	mov al, [load_file.nCylinders]
	mov cl, 8
	mul cl
	add ax, [load_file.nSect9cyl]
	mov cx, 512
	mul cx
	add ax, [load_file.nBytesLastSect]
	adc dx, 0
	
dx will have the upper 16 bits. and ax will have the lower 16.

Based on the data structure, and the handy assumption that 0 <= nBytesLastSec <= 512 (since a sector maxes as 512B, anything more would just copy garbage),
we can conclude that in theory, any subroutine using this struct could copy a max of 1.12 MB (1175552 B, 1148 KB) in one shot. A real disk isn't going to have this much space on a single side unless it's a hard disk. Certainly not a floppy disk.
